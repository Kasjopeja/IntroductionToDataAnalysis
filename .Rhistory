mutate(Performance = hp/wt) %>%
select
f
f <- mtcars %>%
mutate(Performance = hp/wt) %>%
select(Performance>30)
f <- mtcars %>%
mutate(Performance = hp/wt)
f
f <- mtcars %>%
mutate(Performance = hp/wt) %>%
select(Performance)
f
f <- mtcars %>%
mutate(Performance = hp/wt) %>%
select(Performance >30)
f <- mtcars %>%
mutate(Performance = hp/wt) %>%
select(Performance)
f
f <- mtcars %>%
mutate(Performance = hp/wt) %>%
filter(Performance > 30)
f
f <- mtcars %>%
mutate(Performance = hp/wt) %>%
filter(Performance > 30) %>%
select(Performance)
f
f <- mtcars %>%
rename(hp = horsepower, wt = weight)
f <- mtcars %>%
rename(
hp = horsepower,
wt = weight
)
f <- mtcars %>%
rename(
horsepower = hp,
weight = wt
)
f
f <- flights
f <- flights
f
f <- flights %>%
filter(arr_delay > 2)
f
f <- flights %>%
filter(dest == IAH or dest == HOU)
f <- flights %>%
filter(dest == IAH || dest == HOU)
f <- flights %>%
filter(dest == "IAH" || dest == "HOU")
f <- flights %>%
filter(dest == "IAH" or dest == "HOU")
f <- flights %>%
filter(dest %in% c("IAH", "HOU"))
f
f <- flights %>%
filter(carrier %in% c("UA", "AA", "DL"))
f
f <- flights %>%
filter(month %in% c(7, 8, 9))
f <- flights %>%
filter(month %in% c(7, 8, 9))
f
f <- flights %>%
filter(month %in% c(7:9))
f
f <- flights %>%
filter(
arr_delay > 2,
dep_delay <= 0
)
f
f <- flights %>%
filter(arr_delay > 120)
f
f <- flights %>%
filter(
arr_delay > 120,
dep_delay <= 0
)
f
f <- flights %>%
filter(
dep_delay > 60,
dep_delay < -30
)
f <- flights %>%
filter(
dep_delay > 60,
dep_delay < -30
)
f
f <- flights %>%
arrange(dep_delay)
f
f <- flights %>%
arrange(dep_time)
f
f <- flights %>%
mutate(speed = distance / air_time * 60) %>%
arrange(speed)
f
f <- flights %>%
mutate(speed = distance / air_time * 60) %>%
arrange(-speed)
f
f <- flights %>%
distinct(day, month)
f
f <- flights %>%
distinct(day, month) %>%
count()
f
f <- flights %>%
arrange(speed = distance / air_time * 60)
f
f <- flights %>%
arrange(distance)
f <- flights %>%
arrange(distance)
f
f <- flights %>%
arrange(speed = distance / air_time * 60)
head(f)
f <- flights %>%
arrange(distance)
head(f)
f <- flights %>%
group_by(carrier) %>%
arrange(mean(arr_delay))
f
f <- flights %>%
group_by(carrier) %>%
select(mean(arr_delay))
f <- flights %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(avg_arr_delay))
f
f <- flights %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay)) %>%
arrange(desc(avg_arr_delay))
f
f <- flights %>%
group_by(carrier) %>%
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(avg_arr_delay))
f
f <- flights %>%
group_by(dest) %>%
summarize(most_delayed = max(dep_delay+)) %>%
f <- flights %>%
group_by(dest) %>%
summarize(most_delayed = max(dep_delay)) %>%
arrange(most_delayed)
f
f <- flights %>%
group_by(dest) %>%
summarize(most_delayed = max(dep_delay, , na.rm = TRUE)) %>%
arrange(most_delayed)
f <- flights %>%
group_by(dest) %>%
summarize(most_delayed = max(dep_delay, na.rm = TRUE)) %>%
arrange(most_delayed)
f
f <- flights %>%
group_by(dest) %>%
slice_max(order_by = dep_delay, n = 1, with_ties = FALSE) %>%
arrange(desc(dep_delay))
f
f <- flights %>%
group_by(hour) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE),
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
)
f
f <- flights %>%
group_by(year, month, day) %>%
summarize(total_flights = n())
f <- flights %>%
group_by(year, month, day) %>%
summarize(total_flights = n())
f <- flights %>%
group_by(year, month, day) %>%
summarize(total_flights = n(), .groups = "drop")
f <- flights %>%
group_by(year, month, day) %>%
summarize(total_flights = n(), .groups = "drop")
f
f <- flights %>%
group_by(dest) %>%
summarise(frequency = n())
f
f <- flights %>%
group_by(dest) %>%
summarise(frequency = n()) %>%
sort
f <- flights %>%
group_by(dest) %>%
summarise(frequency = n()) %>%
arrange()
f
f <- flights %>%
group_by(dest) %>%
summarise(frequency = n()) %>%
arrange(frequency)
f
f <- flights %>%
count(carrier, sort = TRUE)
f
f <- flights %>%
count(dest, sort = TRUE)
f
f <- flights %>%
count(dest, sort = TRUE)
head(f,10)
f <- flights %>%
arrange(speed = distance / (air_time * 60))
f
f <- flights %>%
mutate(speed = distance / (air_time * 60))
f
f <- flights %>%
mutate(speed = distance / air_time * 60)
f
f <- flights %>%
group_by(carrier) %>%
summarise(speed = distance / air_time * 60)
f
f <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed), an.rm=TRUE)
f
f <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed), na.rm=TRUE)
f
f <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed), na.rm = TRUE)
f
f <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE))
f
f <- flights %>%
count(is.na(dep_time))
f
f <- flights %>%
group_by(year, month, day) %>%
count(is.na(dep_time))
f
f <- flights %>%
group_by(year, month, day) %>%
count(is.na(dep_time), sort = TRUE)
f
f <- flights %>%
filter(is.na(dep_time)) %>%
group_by(year, month, day) %>%
count(n(), sort = TRUE)
f
f <- flights %>%
filter(is.na(dep_time)) %>%
group_by(year, month, day) %>%
count(sort = TRUE)
f
f <- flights %>%
group_by(carrier) %>%
count(mean(dep_delay, na.rm = TRUE))
f
f <- flights %>%
group_by(carrier) %>%
summarize(mean(dep_delay, na.rm = TRUE), .groups = "drop")
f
f <- flights %>%
group_by(carrier) %>%
count(mean_delay = mean(dep_delay, na.rm = TRUE))
f <- flights %>%
group_by(carrier) %>%
count(mean_delay = mean(dep_delay, na.rm = TRUE))
f
f <- flights %>%
group_by(carrier) %>%
summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = "drop")
f <- flights %>%
group_by(carrier) %>%
summarize(mean_dep_delay = mean(dep_delay, na.rm = TRUE), .groups = "drop")
f
f <- flights %>%
filter(is.na(dep_time)) %>%  # Only canceled flights
group_by(year, month, day) %>%
summarize(canceled = n(), .groups = "drop") %>%
arrange(desc(canceled))
f
f <- flights %>%
filter(is.na(dep_time)) %>%
group_by(year, month, day) %>%
count(sort = TRUE)
f
remove.packages("xfun")
install.packages("xfun")  # zainstaluje najnowszą wersję
# potem spróbuj ponownie:
install.packages("litedown", type = "source")
tbl_summary(df, by = Passed) %>%
add_p() %>%
add_overall() %>%
bold_labels()
# Make sure you have these packages installed.
# Uncomment if you need to install any of them:
# install.packages("knitr")
# install.packages("kableExtra")
# install.packages("gt")
# install.packages("gtsummary")
library(tidyverse)    # data manipulation
library(knitr)        # kable()
library(kableExtra)   # advanced kable formatting
library(gt)           # the gt table creation package
library(gtsummary)    # advanced summary tables
tbl_summary(df, by = Passed) %>%
add_p() %>%
add_overall() %>%
bold_labels()
# A small custom data frame for demonstration:
df <- data.frame(
ID       = 1:5,
Name     = c("Alice", "Bob", "Charlie", "Diana", "Ethan"),
Score    = c(88, 95, 70, 91, 84),
Passed   = c(TRUE, TRUE, FALSE, TRUE, TRUE),
stringsAsFactors = FALSE
)
# We'll also use built-in datasets.
head(df)
head(mtcars)
tbl_summary(df, by = Passed) %>%
add_p() %>%
add_overall() %>%
bold_labels()
tbl_summary(
df,
by = Passed,
type = list(Score ~ "continuous"),      # treat Score as continuous
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
add_p() %>%
bold_labels()
tbl_summary(df, by = Passed) %>%
as_gt()      # convert to gt table
install.packages("evaluate")
install.packages("evaluate")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("evaluate")
install.packages("hexbin")
tbl_summary(df, by = Passed) %>%
add_p() %>%
add_overall() %>%
bold_labels()
# Make sure you have these packages installed.
# Uncomment if you need to install any of them:
# install.packages("knitr")
# install.packages("kableExtra")
# install.packages("gt")
# install.packages("gtsummary")
library(tidyverse)    # data manipulation
library(knitr)        # kable()
library(kableExtra)   # advanced kable formatting
library(gt)           # the gt table creation package
library(gtsummary)    # advanced summary tables
# A small custom data frame for demonstration:
df <- data.frame(
ID       = 1:5,
Name     = c("Alice", "Bob", "Charlie", "Diana", "Ethan"),
Score    = c(88, 95, 70, 91, 84),
Passed   = c(TRUE, TRUE, FALSE, TRUE, TRUE),
stringsAsFactors = FALSE
)
# We'll also use built-in datasets.
head(df)
head(mtcars)
tbl_summary(df, by = Passed) %>%
add_p() %>%
add_overall() %>%
bold_labels()
# Your code here:
df <- data.frame(
Math = c(90, 85, 78),
Science = c(88, 92, 84),
Passed = c("Yes", "Yes", "No"),
Grade = c("A", "A", "B")
)
df %>%
kable("html", col.names = c("Math", "Science", "Passed", "Grade")) %>%
add_header_above(c("Scores" = 2, "Results" = 2)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Your code here:
iris_subset <- iris %>%
head(10)
iris_subset %>%
kbl(caption = "Iris Dataset: First 10 Rows") %>%
group_rows(index = table(iris_subset$Species)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Your code here:
iris_subset <- iris %>%
head(10)
iris_subset %>%
kbl(caption = "Iris Dataset: First 10 Rows") %>%
group_rows(index = table(iris_subset$Species)) %>%
general_title = "Note:"
# Your code here:
iris_subset <- iris %>%
head(10)
iris_subset %>%
kbl(caption = "Iris Dataset: First 10 Rows") %>%
group_rows(index = table(iris_subset$Species)) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
footnote(
general = "This table displays the first 10 rows of the iris dataset. It includes measurements of sepal and petal length/width for different iris species.",
general_title = "Note:"
)
# Your code here:
iris_subset <- iris %>%
head(10)
iris_subset %>%
kbl(caption = "Iris Dataset: First 10 Rows") %>%
group_rows(index = table(iris_subset$Species)) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
footnote(
general = "This table displays the first 10 rows of the iris dataset. It includes measurements of sepal and petal length/width for different iris species.",
general_title = "Note:"
)
# Your code here:
iris_subset <- iris %>%
head(10)
# Your code here:
iris_subset <- iris %>%
head(10)
# Your code here:
iris_subset <- iris %>%
head(10)
iris_subset
# Your code here:
df <- iris %>%
slice(1:10)
# Stwórz tabelę z nagłówkiem wielopoziomowym i przypisem
df %>%
kbl(col.names = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"),
caption = "Iris Dataset: First 10 Rows") %>%
add_header_above(c("Sepal" = 2, "Petal" = 2, " " = 1)) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
footnote(
general = "Dane przedstawiają pierwsze 10 obserwacji z zestawu iris — pomiary działek kielicha i płatków dla gatunku *setosa*.",
general_title = "Notatka:"
)
# Your code here:
df <- iris %>%
slice(1:10)
df %>%
kbl(col.names = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"),
caption = "Iris Dataset: First 10 Rows") %>%
add_header_above(c("Sepal" = 2, "Petal" = 2, " " = 1)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
)
# Your code here:
df <- iris %>%
slice(1:10)
df %>%
kbl(col.names = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width", "Species"),
caption = "Iris Dataset: First 10 Rows") %>%
add_header_above(c("Sepal" = 2, "Petal" = 2, " " = 1)) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Your code here:
mpg_summary <- mtcars %>%
group_by(cyl) %>%
summarise(avg_mpg = mean(mpg)) %>%
arrange(cyl)
mpg_summary %>%
gt() %>%
tab_header(
title = "Average MPG by Cylinders"
) %>%
fmt_number(
columns = avg_mpg,
decimals = 1
) %>%
data_color(
columns = avg_mpg,
colors = scales::col_bin(
bins = c(0, 20, Inf),
palette = c("white", "#c7f0d8")
)
)
# Your code here:
mtcars <- mtcars %>%
mutate(am = factor(am, labels = c("Automatic", "Manual")))
mtcars_summary <- mtcars %>%
tbl_summary(
by = am,
statistic = all_continuous() ~ "{mean} ± {sd}",
digits = all_continuous() ~ 1
) %>%
add_p() %>%
add_overall() %>%
as_gt()
